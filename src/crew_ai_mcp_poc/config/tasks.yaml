start_node:
  description: >
    Start the travel booking process by greeting the user and asking whether to initiate a new booking.
  expected_output: >
    A polite greeting message followed by a question to initiate the booking.

extract_fields_node:
  description: >
    Extract values from user input. Validate and update the context using MCP.
  expected_output: >
    Extracted valid fields added to the context. MCP tracks progress.

ask_next_question_node:
  description: >
    Ask the next pending question based on what's still missing in the context.
  expected_output: >
    A clear, friendly question asking for the next missing field.

edit_handler_node:
  description: >
    Understand the user's correction request and update the relevant field.
  expected_output: >
    Updated field confirmed with MCP validation.

booking_options_node:
  description: >
    Use current filled context to suggest mock flight options.
  expected_output: >
    Here are 3 flight options based on your travel:
    
    1. Air Indigo, 08:00 AM, ₹5500, Economy
    2. Vistara, 11:30 AM, ₹6200, Economy
    3. Air India, 6:45 PM, ₹5900, Premium Economy

confirm_summary_node:
  description: >
    You are a travel summary agent. Below is the current booking context:
    {{context}} 
    This includes all MCP fields, selected flight, and other booking details.
    Summarize the travel booking in JSON format. Include:
    - registererDetails
    - travelPlan
    - companyProvidedAccommodation (only if applicable)
    - passengerDetails
    - approver
    - selectedFlight
    Ask user to confirm or edit after showing the full summary..
  expected_output: >
    Output must be clean JSON showing all the above sections. Do not skip selectedFlight.
    Then ask for confirmation or edit.

interactive_booking_task:
  description: >
    You are the main travel assistant for this session. Start by greeting the user.
    Then, in a loop, do the following:
    1. Call `get_next_question` to know what to ask.
    2. Ask user the next pending question.
    3. Wait for user response.
    4. Extract the value from user input. Validate the field against which the question was asked and update MCP using `update_field` with the correct value. If the input is invalid, then don't extract the value and skip updating. 
    Always understand the context of the response and update the relevant field in MCP context.
    If the field is already set, then update it with the new value if user insists to update and only if it is different from the existing one.
    5. If all fields are filled, call `get_pending_fields` and move to flight options.
    6. Present flight options from `set_selected_flight`.
    7. Ask user to choose 1, 2, or 3.
    8. Once selected, call `get_context` and summarize using `get_context`.
    9. Ask user if they want to confirm or edit.
    Loop until the user confirms the booking.
  expected_output: >
    Completed booking with confirmed selected flight and all fields filled in MCP. Give a final summary of the booking.